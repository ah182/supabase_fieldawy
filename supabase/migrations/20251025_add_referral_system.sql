-- Migration to add the referral system feature

-- 1. Add points, rank, and referral_code to the users table
-- points: Stores the user's current point balance. Defaults to 0.
-- rank: Stores the user's rank in the leaderboard. Can be updated periodically.
-- referral_code: A unique code for each user to share.
ALTER TABLE public.users
ADD COLUMN IF NOT EXISTS points INT DEFAULT 0,
ADD COLUMN IF NOT EXISTS rank INT,
ADD COLUMN IF NOT EXISTS referral_code TEXT UNIQUE;

-- 2. Create the referrals table
-- This table tracks the relationship between inviters and invited users.
-- id: Primary key for the referral record.
-- inviter_id: The user who sent the invitation.
-- invited_id: The new user who used the referral code.
-- status: The status of the referral (e.g., 'pending', 'completed').
-- created_at: Timestamp of when the referral was made.
CREATE TABLE IF NOT EXISTS public.referrals (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    inviter_id UUID REFERENCES public.users(id),
    invited_id UUID REFERENCES public.users(id) UNIQUE, -- A user can only be invited once
    status TEXT DEFAULT 'pending',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    CONSTRAINT fk_inviter
        FOREIGN KEY(inviter_id) 
        REFERENCES public.users(id)
        ON DELETE SET NULL, -- Keep referral record even if inviter is deleted
    CONSTRAINT fk_invited
        FOREIGN KEY(invited_id) 
        REFERENCES public.users(id)
        ON DELETE CASCADE -- Delete referral record if the invited user is deleted
);

-- 3. Create a function to generate a unique referral code
-- This function is triggered when a new user is created.
-- It generates a 6-character uppercase alphanumeric code and ensures it's unique.
CREATE OR REPLACE FUNCTION public.generate_referral_code()
RETURNS TRIGGER AS $$
DECLARE
  new_code TEXT;
  is_unique BOOLEAN := false;
  chars text[] := ARRAY['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','0','1','2','3','4','5','6','7','8','9'];
  random_str text := '';
  i integer := 0;
BEGIN
  -- Generate a new code until it is unique
  WHILE NOT is_unique LOOP
    random_str := '';
    for i in 1..6 loop
      random_str := random_str || chars[1+floor(random()*(array_length(chars, 1)))::int];
    end loop;
    new_code := 'FS_' || random_str;
    is_unique := NOT EXISTS (SELECT 1 FROM public.users WHERE referral_code = new_code);
  END LOOP;
  -- Set the new code for the new user
  NEW.referral_code := new_code;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 4. Create a trigger to automatically generate a referral code for new users
-- This trigger calls the generate_referral_code() function for every new user inserted into the table.
CREATE TRIGGER on_new_user_generate_referral_code
BEFORE INSERT ON public.users
FOR EACH ROW
EXECUTE FUNCTION public.generate_referral_code();

-- 5. Add RLS (Row Level Security) policies for the referrals table
-- Enable RLS on the referrals table
ALTER TABLE public.referrals ENABLE ROW LEVEL SECURITY;

-- Policy: Allow users to see their own referral records (both as inviter and invited)
CREATE POLICY "Allow users to see their own referrals"
ON public.referrals
FOR SELECT
USING (auth.uid() = inviter_id OR auth.uid() = invited_id);

-- Policy: Allow new users to insert their own referral record
-- This assumes the invited_id is being set to the current user's ID
CREATE POLICY "Allow new users to create their own referral record"
ON public.referrals
FOR INSERT
WITH CHECK (auth.uid() = invited_id);
