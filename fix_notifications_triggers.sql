-- ===================================================================
-- ุฅุตูุงุญ triggers ุงูุฅุดุนุงุฑุงุช ูููุธุงุฆู ูุงููุณุชูุฒูุงุช ุงูุจูุทุฑูุฉ
-- ===================================================================
-- ูุฐุง ุงูููู ูุตุญุญ ุฃุณูุงุก ุงูุญููู ูู triggers ุงูุฅุดุนุงุฑุงุช

-- ===================================================================
-- 1. ุฅุตูุงุญ ุฏุงูุฉ ุฅุดุนุงุฑุงุช ุงููุธุงุฆู
-- ===================================================================

CREATE OR REPLACE FUNCTION notify_job_offers_change()
RETURNS TRIGGER AS $$
DECLARE
  webhook_url text;
  payload jsonb;
BEGIN
  -- ูุญุต ูุง ุฅุฐุง ูุงู ุงูุชุญุฏูุซ ููุท ุนูู ุนููุฏ views_count
  IF TG_OP = 'UPDATE' THEN
    IF NOT (
      OLD.title IS DISTINCT FROM NEW.title OR
      OLD.description IS DISTINCT FROM NEW.description OR
      OLD.phone IS DISTINCT FROM NEW.phone OR
      OLD.status IS DISTINCT FROM NEW.status
    ) THEN
      -- ููุท views_count ุฃู updated_at ุชู ุชุญุฏูุซููุง - ูุง ูุฑุณู ุฅุดุนุงุฑ
      RAISE NOTICE 'Skipping notification - only views_count or updated_at changed';
      RETURN NEW;
    END IF;
  END IF;

  -- ุงูุญุตูู ุนูู webhook URL
  webhook_url := current_setting('app.webhook_url', true);
  
  IF webhook_url IS NULL OR webhook_url = '' THEN
    RAISE NOTICE 'Webhook URL not configured';
    RETURN NEW;
  END IF;

  -- ุฅูุดุงุก payload ููุฅุดุนุงุฑ
  payload := jsonb_build_object(
    'type', TG_OP,
    'table', TG_TABLE_NAME,
    'record', row_to_json(NEW),
    'old_record', CASE WHEN TG_OP = 'UPDATE' THEN row_to_json(OLD) ELSE null END
  );

  -- ุฅุฑุณุงู webhook
  PERFORM net.http_post(
    url := webhook_url,
    body := payload::text,
    headers := '{"Content-Type": "application/json"}'::jsonb
  );

  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- ===================================================================
-- 2. ุฅุตูุงุญ ุฏุงูุฉ ุฅุดุนุงุฑุงุช ุงููุณุชูุฒูุงุช ุงูุจูุทุฑูุฉ
-- ===================================================================

CREATE OR REPLACE FUNCTION notify_vet_supplies_change()
RETURNS TRIGGER AS $$
DECLARE
  webhook_url text;
  payload jsonb;
BEGIN
  -- ูุญุต ูุง ุฅุฐุง ูุงู ุงูุชุญุฏูุซ ููุท ุนูู ุนููุฏ views_count
  IF TG_OP = 'UPDATE' THEN
    IF NOT (
      OLD.name IS DISTINCT FROM NEW.name OR
      OLD.description IS DISTINCT FROM NEW.description OR
      OLD.price IS DISTINCT FROM NEW.price OR
      OLD.image_url IS DISTINCT FROM NEW.image_url OR
      OLD.phone IS DISTINCT FROM NEW.phone OR
      OLD.status IS DISTINCT FROM NEW.status
    ) THEN
      -- ููุท views_count ุฃู updated_at ุชู ุชุญุฏูุซููุง - ูุง ูุฑุณู ุฅุดุนุงุฑ
      RAISE NOTICE 'Skipping notification - only views_count or updated_at changed';
      RETURN NEW;
    END IF;
  END IF;

  -- ุงูุญุตูู ุนูู webhook URL
  webhook_url := current_setting('app.webhook_url', true);
  
  IF webhook_url IS NULL OR webhook_url = '' THEN
    RAISE NOTICE 'Webhook URL not configured';
    RETURN NEW;
  END IF;

  -- ุฅูุดุงุก payload ููุฅุดุนุงุฑ
  payload := jsonb_build_object(
    'type', TG_OP,
    'table', TG_TABLE_NAME,
    'record', row_to_json(NEW),
    'old_record', CASE WHEN TG_OP = 'UPDATE' THEN row_to_json(OLD) ELSE null END
  );

  -- ุฅุฑุณุงู webhook
  PERFORM net.http_post(
    url := webhook_url,
    body := payload::text,
    headers := '{"Content-Type": "application/json"}'::jsonb
  );

  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- ===================================================================
-- 3. ุฅุนุงุฏุฉ ุฅูุดุงุก triggers ูุน ุงูุฏูุงู ุงููุตุญุญุฉ
-- ===================================================================

-- ุญุฐู triggers ุงููุฏููุฉ
DROP TRIGGER IF EXISTS trigger_notify_job_offers ON job_offers;
DROP TRIGGER IF EXISTS trigger_notify_vet_supplies ON vet_supplies;

-- ุฅูุดุงุก triggers ุฌุฏูุฏุฉ
CREATE TRIGGER trigger_notify_job_offers
AFTER INSERT OR UPDATE ON job_offers
FOR EACH ROW
EXECUTE FUNCTION notify_job_offers_change();

CREATE TRIGGER trigger_notify_vet_supplies
AFTER INSERT OR UPDATE ON vet_supplies
FOR EACH ROW
EXECUTE FUNCTION notify_vet_supplies_change();

-- ===================================================================
-- 4. ุชุฃููุฏ ุงูุฅุตูุงุญ
-- ===================================================================

SELECT 
  'ุชู ุฅุตูุงุญ triggers ุงูุฅุดุนุงุฑุงุช ุจูุฌุงุญ!' as status,
  'job_offers: title, description, phone, status' as job_offers_fields,
  'vet_supplies: name, description, price, image_url, phone, status' as vet_supplies_fields,
  'views_count updates will be ignored' as protection;

-- ===================================================================
-- ุชู ุงูุงูุชูุงุก ูู ุงูุฅุตูุงุญ! ๐
-- ===================================================================

/*
โ ูุง ุชู ุฅุตูุงุญู:

1. ๐ผ ุฅุดุนุงุฑุงุช ุงููุธุงุฆู:
   - ุงูุญููู ุงูุตุญูุญุฉ: title, description, phone, status
   - ุชุฌุงูู ุชุญุฏูุซุงุช: views_count, updated_at
   - ุฅุฒุงูุฉ ุงูุญููู ุบูุฑ ุงูููุฌูุฏุฉ: job_title, company_name, location, salary, etc.

2. ๐ฅ ุฅุดุนุงุฑุงุช ุงููุณุชูุฒูุงุช:
   - ุงูุญููู ุงูุตุญูุญุฉ: name, description, price, image_url, phone, status
   - ุชุฌุงูู ุชุญุฏูุซุงุช: views_count, updated_at
   - ุฅุฒุงูุฉ ุงูุญููู ุบูุฑ ุงูููุฌูุฏุฉ: category, brand, stock_quantity, email, etc.

๐งช ุงุฎุชุจุงุฑ ุงูุฅุตูุงุญ:

-- โ ุณูุฑุณู ุฅุดุนุงุฑ (ุชุญุฏูุซ title)
UPDATE job_offers SET title = 'ุนููุงู ุฌุฏูุฏ' WHERE id = 'job-id';

-- โ ุณูุฑุณู ุฅุดุนุงุฑ (ุชุญุฏูุซ price)
UPDATE vet_supplies SET price = 50.00 WHERE id = 'supply-id';

-- โ ูู ูุฑุณู ุฅุดุนุงุฑ (ุชุญุฏูุซ views_count ููุท - ูุญูู!)
UPDATE job_offers SET views_count = views_count + 1 WHERE id = 'job-id';
UPDATE vet_supplies SET views_count = views_count + 1 WHERE id = 'supply-id';

ุงูุขู Triggers ุณุชุนูู ุจุฏูู ุฃุฎุทุงุก!
*/